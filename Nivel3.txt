import robocode.*;
import static robocode.util.Utils.normalRelativeAngleDegrees;
import java.awt.*;

// API help : http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html

/**
 * Nivel 3 - a robot by Francisco Javier Pacheco Herranz y Javier Romero PÃ©rez
 * 
 * The robot locks an enemy in his radar when scanned and follows it while shooting
 */
public class NOMBRECLASE extends AdvancedRobot
{
	static double enemyAbsoluteBearing;
	private int timeSinceLastScan = 5;
	
	public void run() {

		setColors(COLORBODY,COLORGUN,COLORRADAR); // body,gun,radar

		// Battlefield size
		setAdjustGunForRobotTurn(true); // if the robot is turned, don't turn the gun

		setAdjustRadarForGunTurn(true); // if the gun is turned, don't turn the radar
		
		// Robot main loop
		while(true) {
			doScanner();
		}
	}
		
	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
		
		enemyAbsoluteBearing = getHeadingRadians() + e.getBearingRadians(); 
		timeSinceLastScan = 0; 
		if(e.getDistance() <= 300)
		{
			
				if(getEnergy() > 50)
				{
				
				fire(3);
				}
				else
				{
					fire(1);
				}	
		}
	}

	/**
	 * onHitByBullet: What to do when you're hit by a bullet
	 */
	public void onHitByBullet(HitByBulletEvent e) {
		double bearing = e.getBearing();
		turnRight(bearing*-1);
		ahead(10);
	}
	
	public void doScanner() {

		timeSinceLastScan++; 
		double radarOffset = Double.POSITIVE_INFINITY; 
		
		if(timeSinceLastScan < 3) {

			radarOffset = robocode.util.Utils.normalRelativeAngle(getRadarHeadingRadians()
			- enemyAbsoluteBearing);
	
			radarOffset += sign(radarOffset) * 0.02;
	
			}
	
			setTurnRadarLeftRadians(radarOffset); 
	
			setTurnGunLeftRadians(getGunHeadingRadians() - getRadarHeadingRadians());
			
			setTurnLeft(radarOffset);
			ahead(10);
		}

	private int sign(double v) {
		return v > 0 ? 1 : -1;
	}

	/**
	 * onHitWall: What to do when you hit a wall
	 */
	public void onHitWall(HitWallEvent e) {
		
		turnLeft(180);
	}	
}
