import robocode.*;
import static robocode.util.Utils.normalRelativeAngleDegrees;
import java.awt.*;

// API help : http://robocode.sourceforge.net/docs/robocode/robocode/Robot.html

/**
 * Nivel 3 - a robot by Francisco Javier Pacheco Herranz y Javier Romero PÃ©rez
 * 
 * The robot runs around the map in circles, and then crosses it and turns back to its original circuit
 */
public class NOMBRECLASE extends AdvancedRobot
{
		 int moveDirection=1;//which way to move
	static double enemyAbsoluteBearing;
	private int timeSinceLastScan = 5;
	/**
	 * run: Prueba's default behavior
	 */
	public void run() {
		 setAdjustGunForRobotTurn(true); // Keep the gun still when we turn
turnRadarRightRadians(Double.POSITIVE_INFINITY);//keep turning radar right
	}
		
	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
        double absBearing=e.getBearingRadians()+getHeadingRadians();//enemies absolute bearing
        double latVel=e.getVelocity() * Math.sin(e.getHeadingRadians() -absBearing);//enemies later velocity
        double gunTurnAmt;//amount to turn our gun
        setTurnRadarLeftRadians(getRadarTurnRemainingRadians());//lock on the radar
        if(Math.random()>.9){
            setMaxVelocity((12*Math.random())+12);//randomly change speed
        }
        if (e.getDistance() > 150) {//if distance is greater than 150
            gunTurnAmt = robocode.util.Utils.normalRelativeAngle(absBearing- getGunHeadingRadians()+latVel/22);//amount to turn our gun, lead just a little bit
            setTurnGunRightRadians(gunTurnAmt); //turn our gun
            setTurnRightRadians(robocode.util.Utils.normalRelativeAngle(absBearing-getHeadingRadians()+latVel/getVelocity()));//drive towards the enemies predicted future location
            setAhead((e.getDistance() - 140)*moveDirection);//move forward
            setFire(3);//fire
        }
        else{//if we are close enough...
            gunTurnAmt = robocode.util.Utils.normalRelativeAngle(absBearing- getGunHeadingRadians()+latVel/15);//amount to turn our gun, lead just a little bit
            setTurnGunRightRadians(gunTurnAmt);//turn our gun
            setTurnLeft(-90-e.getBearing()); //turn perpendicular to the enemy
            setAhead((e.getDistance() - 140)*moveDirection);//move forward
            setFire(3);//fire
        }
}

	/**
	 * onHitByBullet: What to do when you're hit by a bullet
	 */
	public void onHitByBullet(HitByBulletEvent e) {
		double bearing = e.getBearing();
		turnRight(bearing*-1);
		ahead(10);
	}
	
	/*
	 * getQuadrant: returns the quadrant in which the robot sets
	 */
	private int getQuadrant(double x, double y, double battleFieldHeight, double battleFieldWidth) {
			int quadrant = 0;
			if(y > battleFieldHeight/2) { 
				if (x < battleFieldWidth/2) 
					quadrant = 0;
				else
					quadrant = 1;
			}
			else {
				if (x < battleFieldWidth/2) 
					quadrant = 3;
				else
					quadrant = 2;
			}	
			return quadrant;
	}
	
	public void doScanner() {

		timeSinceLastScan++; /*increment timeSinceLastScan if no enemy bot is detected
		for 3 ticks(lock on enemy slipped)

		therefore radar is allowed to spin again to search for a new enemy bot 
		*/ 
		double radarOffset = Double.POSITIVE_INFINITY; 
		
		if(timeSinceLastScan < 3) {

		/*calculates how much the radar has to move to hold the lock on the enemy bot
		*/

			radarOffset = robocode.util.Utils.normalRelativeAngle(getRadarHeadingRadians()
			- enemyAbsoluteBearing);
	
			radarOffset += sign(radarOffset) * 0.02;
	
			}
	
			setTurnRadarLeftRadians(radarOffset); //turns radar for the amount of offset
			//angle to keep lock on enemy bot
			
	
			setTurnGunLeftRadians(getGunHeadingRadians() - getRadarHeadingRadians());
			//turns gun to aim towards enemy bot locked onto
			setTurnLeft(radarOffset);
			ahead(10);
		}
	//radar movement direction determined by direction of movement of enemy robot

	private int sign(double v) {
		return v > 0 ? 1 : -1;
	}

	/**
	 * onHitWall: What to do when you hit a wall
	 */
	public void onHitWall(HitWallEvent e) {
		// Replace the next line with any behavior you would like
		turnLeft(180);
	}	
}
